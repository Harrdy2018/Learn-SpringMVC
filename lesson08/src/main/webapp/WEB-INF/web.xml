<web-app id="WebApp_ID" version="2.4"
         xmlns="http://java.sun.com/xml/ns/j2ee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee
	     http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">
  <!--自定义Spring配置文件的位置和名称-->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath:spring.xml</param-value>
  </context-param>
  <!--
   配置Spring的监听器，在服务器启动时加载Spring的配置文件
   Spring配置文件默认位置和名称：/WEB-INF/applicationContext.xml
   可通过上下文参数自定义Spring配置文件的位置和名称
   -->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>

  <!-- 注册ServletContextListener -->
<!--  <listener>-->
<!--    <listener-class>com.sohu.listener.MyServletContextListener</listener-class>-->
<!--  </listener>-->

  <!-- ServletContextAttributeListener -->
<!--  <listener>-->
<!--    <listener-class>com.sohu.listener.MyServletContextAttributeListener</listener-class>-->
<!--  </listener>-->

  <!-- ServletRequestListener -->
<!--  <listener>-->
<!--    <listener-class>com.sohu.listener.MyServletRequestListener</listener-class>-->
<!--  </listener>-->

  <!-- HttpSessionListener -->
<!--  <listener>-->
<!--    <listener-class>com.sohu.listener.MyHttpSessionListener</listener-class>-->
<!--  </listener>-->

  <!-- 自定义Session扫描器 -->
  <listener>
    <listener-class>com.sohu.listener.MyScanSessionListener</listener-class>
  </listener>


  <!--配置SpringMVC的前端控制器 ,对浏览器发送的请求统一进行处理-->
  <servlet>
    <servlet-name>MyServlet</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <!--设置DispatchServlet加载配置文件的路径和名字。设置后，配置文件就可以放到resources目录下了.SpringMVC.xml就是配置文件的名字-->
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:SpringMVC.xml</param-value>
    </init-param>
    <!--将DispatcherServlet的初始化时间提前到服务器启动时-->
    <load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>MyServlet</servlet-name>
    <!--
    设置springMVC的核心控制器所能处理的请求的请求路径
    url-pattern中 / 和 /*的区别；
        /:匹配浏览器向服务器发送的所有请求（不包括.jsp）,因为DispatcherServlet处理不了.jsp请求，.jsp请求得由
           Tomcat里自带的JspServlet处理。
        /*:匹配浏览器向服务器发送的所有请求（包括.jsp）
    -->
    <url-pattern>/</url-pattern>
  </servlet-mapping>
</web-app>

<!--
applicationContext.xml定义了在所有servlet之间共享的bean。如果您的应用程序有多个servlet，那么在applicationContext.xml中定义共有的资源那就很有用了。
spring-servlet.xml定义了只与该servlet相关的bean。这是dispatche servlet。因此，你的Spring MVCcontrollers 必须要在这个文件中定义。
如果在web应用程序中只运行一个servlet，那么在spring-servlet.xml里面中定义所有的bean也是没有问题的鸭。
-->
